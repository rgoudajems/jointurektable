package testjoin.com.test.kafka;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Arrays;
import java.util.List;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.kafka.streams.Consumed;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.Materialized;
import org.apache.kafka.streams.kstream.Produced;
import org.apache.kafka.streams.state.KeyValueIterator;
import org.apache.kafka.streams.state.QueryableStoreTypes;
import org.apache.kafka.streams.state.ReadOnlyKeyValueStore;

import com.fasterxml.jackson.databind.JsonNode;

public class JoinTabContAdr {
	public static void main(final String[] args) throws Exception {
		final String contactTopic = "contact";
    	final String adresseTopic = "adresse";
    	final String jointureTopic = "contact-adresse";
        Properties config = new Properties();
        config.put(StreamsConfig.APPLICATION_ID_CONFIG, "join-table-adresse-contact");
        config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());
        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, JsonSerializer.class.getName());
        
       //Les données contacts 
        List<KeyValue<String, Contact>> contactRecords = Arrays.asList(
        	new KeyValue<> ("C3",new Contact("C3", "rgouda@jems-group.com")),		
            new KeyValue<> ("C1", new Contact("C1", "luis@jems-group.com")),
            new KeyValue<>("C2", new Contact("C2", "thomas@jems-group.com")),
            new KeyValue<> ("C1",new Contact("C1", "luis@dovama.fr")),
            new KeyValue<>("C2",new Contact("C2", "thomas@antilop.fr")), 
            new KeyValue<>("C3",new Contact("C3", "rgouda@antilop.com")),
            new KeyValue<>("C2",new Contact("C2", "thomas@phenix.fr"))
        );
        /*
         * 
         * Retenir les dernières valeurs de chaque id : 
         * ("C1", "luis@dovama.fr"),
         * ("C2", "thomas@phenix.fr") ,
         * ("C3", "rgouda@antilop.com"),
         * 
         * 
         * */
        
        /*Producer de données contact
         * 
         * bin/kafka-console-producer --broker-list localhost:9092 --topic simple-contact \
  			--property "parse.key=true" \
  			--property "key.separator=:"
         * 
         * */
       
        // Les données adresses 
        List<KeyValue<String, String>> adressesRecords = Arrays.asList(
            new KeyValue<>("C1", "Neuilly"),
            new KeyValue<>("C2", "Neuilly"),
            new KeyValue<>("C2", "Colombes"),
            new KeyValue<>("C3", "Neuilly"),
            new KeyValue<>("C2", "Sarclay"),
            new KeyValue<>("C2", "Defense"),
            new KeyValue<>("C1", "Colombes"),
            new KeyValue<>("C3", "Sarclay"),
            new KeyValue<>("C3", "Colombes")    
        );
        
        
        /*
         * 
         * Retenir les dernières valeurs de chaque id : 
         * ("C1", "Colombes"),
         * ("C2", "Defense"),
         * ("C3", "Colombes") 
         * 
         * 
         * */
        
        /*Producer de données adresse 
bin/kafka-console-producer --broker-list localhost:9092 --topic simple-adresse \
--property "parse.key=true" \
--property "key.separator=:"
         * */
        
        /*Consommateur de données jointure contact-adresse
         * 
bin/kafka-console-consumer --bootstrap-server localhost:9092 \
--topic  contacts-adresses-simple \
--from-beginning \
--formatter kafka.tools.DefaultMessageFormatter \
--property print.key=true \
--property print.value=true \
--property key.deserializer=org.apache.kafka.common.serialization.StringDeserializer \
--property value.deserializer=org.apache.kafka.common.serialization.StringDeserializer 
         * */

      List<KeyValue<String, String>> expectedResults = Arrays.asList(
            new KeyValue<>("C1", "luis@dovama.fr/Colombes"),
            new KeyValue<>("C1", "luis@dovama.fr/Defense"),
            new KeyValue<>("C1", "luis@dovama.fr/Neuilly"),
            new KeyValue<>("C2", "thomas@phenix.fr/Defense"),
            new KeyValue<>("C2", "thomas@phenix.fr/Sarclay"),
            new KeyValue<>("C3", "rgouda@antilop.com/Colombes")
        );

        List<KeyValue<String, String>> expectedResultsForJoinStateStore = Arrays.asList(
        		  new KeyValue<>("C1", "luis@dovama.fr/Colombes"),
                  new KeyValue<>("C2", "thomas@phenix.fr/Defense"),
                  new KeyValue<>("C3", "rgouda@antilop.com/Colombes")
        );
        final Serde<String> stringSerde = Serdes.String();
        
    
        StreamsBuilder builder = new StreamsBuilder();
        KTable<String, String> contactTable = builder.table(contactTopic);
        KTable<String, String> adresseTable = builder.table(adresseTopic);

        String storeName = "joined-store-simple-adresse-contact";
        contactTable.join(adresseTable,
            (contact,adresse ) -> contact + "/" + adresse,
            Materialized.as(storeName))
            .toStream()
            .to(jointureTopic, Produced.with(Serdes.String(), Serdes.String()));


        KafkaStreams streams = new KafkaStreams(builder.build(), config );
        streams.start();
    
        //
        //  Publiction des contacts.
        //
        Properties contactsProducerConfig = new Properties();        
        contactsProducerConfig.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        contactsProducerConfig.put(ProducerConfig.ACKS_CONFIG, "all");
        contactsProducerConfig.put(ProducerConfig.RETRIES_CONFIG, 0);
        contactsProducerConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        contactsProducerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        //IntegrationTestUtils.produceKeyValuesSynchronously(contactTopic, contactRecords, contactsProducerConfig);

        //
        // Publiction des adresses.
        //
        Properties adressesProducerConfig = new Properties();
        adressesProducerConfig.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        adressesProducerConfig.put(ProducerConfig.ACKS_CONFIG, "all");
        adressesProducerConfig.put(ProducerConfig.RETRIES_CONFIG, 0);
        adressesProducerConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        adressesProducerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        IntegrationTestUtils.produceKeyValuesSynchronously(adresseTopic, adressesRecords, adressesProducerConfig);

        //
        // Jointure Adresses--Contacts
        //
        Properties consumerConfig = new Properties();
        consumerConfig.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        consumerConfig.put(ConsumerConfig.GROUP_ID_CONFIG,  "table-table-simple-table-adresse-contact");
        consumerConfig.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        List<KeyValue<String, String>> actualResults = IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(consumerConfig,
        jointureTopic, expectedResults.size());

        System.out.println(actualResults.toString());
        // Verify the (local) state store of the joined table.
        // For a comprehensive demonstration of interactive queries please refer to KafkaMusicExample.
        ReadOnlyKeyValueStore<String, String> readOnlyKeyValueStore =
            streams.store(storeName, QueryableStoreTypes.keyValueStore());
        KeyValueIterator<String, String> keyValueIterator = readOnlyKeyValueStore.all();
        assertThat(keyValueIterator).containsExactlyElementsOf(expectedResultsForJoinStateStore);

        streams.close();
        assertThat(actualResults).containsExactlyElementsOf(expectedResults);
    

 
}
}
